{
  "name": "Get Notion Block Id",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "targetBlockTitle"
            },
            {
              "name": "targetMainPageId"
            }
          ]
        }
      },
      "id": "103dce0f-98f7-4e35-b015-0b50108bf067",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -480,
        -80
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56a12c7c-8b47-43f7-a060-17ed5f1ec65f",
              "name": "block_id",
              "value": "={{ $json.block_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        400,
        -80
      ],
      "id": "a942b38a-0c8f-426d-b7bc-9c7575b46cb5",
      "name": "Edit Fields",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.targetMainPageId }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -140,
        -80
      ],
      "id": "94769d26-b39a-4f88-be09-c5017dc4a678",
      "name": "Get All sub blocks",
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "snOvbWupBFXeHmM7",
          "name": "Notion AlpAct"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Code N8N pour trouver un block par son titre depuis le JSON des blocks\n// Mode: \"Run once for all items\"\n\nconst allItems = $input.all().map(i => i.json);\n\n// Configuration - Modifiez ces valeurs selon vos besoins\nconst TARGET_BLOCK_TITLE = $('Start').first().json.targetBlockTitle;\nconst TARGET_PARENT_PAGE_ID = $('Start').first().json.targetMainPageId; // Optionnel: ID de la page parente sp√©cifique (null = chercher partout)\n\n// Fonction pour extraire le contenu/titre d'un block\nfunction getBlockContent(block) {\n    // Si le block a directement une propri√©t√© content\n    if (block.content && typeof block.content === 'string') {\n        return block.content.trim();\n    }\n    \n    // Si le block a une propri√©t√© title\n    if (block.title && typeof block.title === 'string') {\n        return block.title.trim();\n    }\n    \n    // Pour les blocks avec rich_text (structure Notion standard)\n    if (block[block.type] && block[block.type].rich_text) {\n        return block[block.type].rich_text\n            .map(text => text.plain_text || text.text?.content || '')\n            .join('')\n            .trim();\n    }\n    \n    // Cas sp√©ciaux selon le type de block\n    switch (block.type) {\n        case 'heading_1':\n        case 'heading_2':\n        case 'heading_3':\n            if (block.heading_1?.rich_text) return block.heading_1.rich_text.map(t => t.plain_text || '').join('').trim();\n            if (block.heading_2?.rich_text) return block.heading_2.rich_text.map(t => t.plain_text || '').join('').trim();\n            if (block.heading_3?.rich_text) return block.heading_3.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'paragraph':\n            if (block.paragraph?.rich_text) return block.paragraph.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'toggle':\n            if (block.toggle?.rich_text) return block.toggle.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'bulleted_list_item':\n            if (block.bulleted_list_item?.rich_text) return block.bulleted_list_item.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'numbered_list_item':\n            if (block.numbered_list_item?.rich_text) return block.numbered_list_item.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'to_do':\n            if (block.to_do?.rich_text) return block.to_do.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'quote':\n            if (block.quote?.rich_text) return block.quote.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n            \n        case 'callout':\n            if (block.callout?.rich_text) return block.callout.rich_text.map(t => t.plain_text || '').join('').trim();\n            break;\n    }\n    \n    return '';\n}\n\n// Fonction pour normaliser les IDs (supprimer les tirets)\nfunction normalizeId(id) {\n    return id ? id.replace(/-/g, '') : '';\n}\n\n// Fonction principale pour trouver le block\nfunction findBlockByTitle(blocks, targetTitle, targetParentId = null) {\n    console.log(`üîç Recherche du block avec le titre: \"${targetTitle}\"`);\n    console.log(`üìä Nombre total de blocks √† analyser: ${blocks.length}`);\n    \n    if (targetParentId) {\n        console.log(`üìÑ Recherche limit√©e √† la page parente: ${targetParentId}`);\n    }\n    \n    // Normaliser l'ID parent si fourni\n    const normalizedTargetParentId = targetParentId ? normalizeId(targetParentId) : null;\n    \n    // Filtrer par page parente si sp√©cifi√©e\n    let blocksToSearch = blocks;\n    if (normalizedTargetParentId) {\n        blocksToSearch = blocks.filter(block => {\n            const blockParentId = normalizeId(block.parent?.page_id || block.parent_id || '');\n            return blockParentId === normalizedTargetParentId;\n        });\n        console.log(`üìä Blocks dans la page parente: ${blocksToSearch.length}`);\n    }\n    \n    // Chercher le block avec le titre correspondant\n    for (const block of blocksToSearch) {\n        const blockContent = getBlockContent(block);\n        \n        // Debug: afficher les premiers blocks analys√©s\n        if (blocksToSearch.indexOf(block) < 10) {\n            console.log(`üîç Block ${block.id}: \"${blockContent}\" (type: ${block.type})`);\n        }\n        \n        // Comparaison insensible √† la casse et aux espaces\n        if (blockContent.toLowerCase() === targetTitle.toLowerCase()) {\n            console.log(`‚úÖ Block trouv√©!`);\n            console.log(`   - ID: ${block.id}`);\n            console.log(`   - Type: ${block.type}`);\n            console.log(`   - Contenu: \"${blockContent}\"`);\n            console.log(`   - Parent ID: ${block.parent?.page_id || block.parent_id}`);\n            \n            return {\n                found: true,\n                block_id: block.id,\n                block_type: block.type,\n                block_content: blockContent,\n                parent_id: block.parent?.page_id || block.parent_id || null,\n                has_children: block.has_children || false,\n                root_id: block.root_id || null\n            };\n        }\n    }\n    \n    // Block non trouv√© - afficher des infos de debug\n    console.log(`‚ùå Block \"${targetTitle}\" non trouv√©`);\n    console.log(`üìã Blocks disponibles avec du contenu:`);\n    \n    const blocksWithContent = blocksToSearch\n        .map(block => ({\n            id: block.id,\n            type: block.type,\n            content: getBlockContent(block),\n            parent_id: block.parent?.page_id || block.parent_id\n        }))\n        .filter(block => block.content)\n        .slice(0, 10); // Limiter √† 10 pour √©viter trop de logs\n    \n    blocksWithContent.forEach(block => {\n        console.log(`   - \"${block.content}\" (${block.type})`);\n    });\n    \n    return {\n        found: false,\n        block_id: null,\n        error: `Block \"${targetTitle}\" non trouv√©`,\n        searched_title: targetTitle,\n        total_blocks_searched: blocksToSearch.length,\n        blocks_with_content: blocksWithContent.length,\n        target_parent_id: targetParentId\n    };\n}\n\n// Ex√©cution\ntry {\n    const result = findBlockByTitle(allItems, TARGET_BLOCK_TITLE, TARGET_PARENT_PAGE_ID);\n    \n    // Retourner le r√©sultat\n    return {\n        success: result.found,\n        ...result,\n        searched_title: TARGET_BLOCK_TITLE,\n        timestamp: new Date().toISOString()\n    };\n    \n} catch (error) {\n    console.log(`‚ùå Erreur lors de la recherche: ${error.message}`);\n    return {\n        success: false,\n        block_id: null,\n        error: error.message,\n        searched_title: TARGET_BLOCK_TITLE,\n        timestamp: new Date().toISOString()\n    };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        -80
      ],
      "id": "08a6d6ab-e0e6-40a1-9ef4-a267f3dc96b6",
      "name": "Extract ID from parent block"
    }
  ],
  "pinData": {
    "Start": [
      {
        "json": {
          "targetBlockTitle": "Prompt lovable",
          "targetMainPageId": "264ca86a94e58075a696e9f1c73fb391"
        }
      }
    ]
  },
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get All sub blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All sub blocks": {
      "main": [
        [
          {
            "node": "Extract ID from parent block",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract ID from parent block": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "280dd140-58df-4f43-b3ef-94430218d252",
  "meta": {
    "instanceId": "cb0d888b2669ace4f2f781e684ee8100f0ad3fd9239d2c021aab9cca9e9602ef"
  },
  "id": "258hRRJvTwdJTIUC",
  "tags": [
    {
      "createdAt": "2025-09-03T16:26:16.510Z",
      "updatedAt": "2025-09-03T16:26:16.510Z",
      "id": "fMhvLwPBTuM8eI5O",
      "name": "AlpAct"
    }
  ]
}